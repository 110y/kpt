// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "mdtogo"; DO NOT EDIT.
package overview

var READMEShort = `<link rel="stylesheet" type="text/css" href="/kpt/gifs/asciinema-player.css" />`
var READMELong = `
kpt is a toolkit to help you manage, examine, manipulate, customize, validate, and apply Kubernetes resource
configuration files, both manually and programmatically.  (And has a name short enough that you don't have to alias it to ` + "`" + `k` + "`" + `).

A primary goal of kpt is to facilitate configuration reuse. The two primary sets of capabilities that are required to enable reuse are:
1. The ability to distribute/publish/share, compose, and update groups of configuration artifacts, commonly known as packages.
2. The ability to adapt them to your use cases, which we call customization.

In order to facilitate programmatic operations, kpt:
1. Relies upon git as the source of truth
2. Represents configuration as data, specifically Kubernetes resources serialized as YAML or JSON.

For compability with other arbitrary formats, kpt supports generating resource configuration data from templates,
configuration DSLs, and programs.

kpt functionality is subdivided into command groups, each of which operates on a particular set of entities, with a consistent command syntax and pattern of inputs and outputs.

| Command Group | Description                                                                     |
|---------------|---------------------------------------------------------------------------------|
| [pkg]         | fetch, update, and sync configuration files using git                           |
| [cfg]         | examine and modify configuration files                                          |
| [fn]          | generate, transform, validate configuration files using containerized functions |
| TODO          | reconcile configuration files with the live state                               |

---

#### [pkg] Package Management

Fetch, update, and sync configuration files using git.

- Fetch and customize blueprints published by others.
- Fetch the standard scaffolding for your new service.
- Update your customized package by merging changes from upstream.

**Data Flow**: git repo -> kpt [pkg] -> local files or stdout

| Configuration Read From | Configuration Written To |
|-------------------------|--------------------------|
| git repository          | local files              |

---

#### [cfg] Configuration Management

Examine and modify configuration files.

- Display structured and condensed views of your resources
- Filter and display resources by constraints
- Set high-level knobs published by the package
- Define and expose new knobs to simplify routine modifications

**Data Flow**: local configuration or stdin -> kpt [cfg] -> local configuration or stdout

| Configuration Read From | Configuration Written To |
|-------------------------|--------------------------|
| local files or stdin    | local files or stdout    |

---

#### [fn] Configuration Functions

Generate, transform, validate configuration files using containerized functions.

- Generate resources from code, DSLs, templates, etc.
- Apply cross-cutting transformations to resources
- Validate resources

*` + "`" + `fn` + "`" + ` is different from ` + "`" + `cfg` + "`" + ` in that it executes programs published as container images, rather
than statically compiled into kpt.*

**Data Flow**:  local configuration or stdin -> kpt [fn] (runs a container) -> local configuration or stdout

| Configuration Read From | Configuration Written To |
|-------------------------|--------------------------|
| local files or stdin    | local files or stdout    |

---

#### Coming soon: Live-state Management

Reconcile configuration files with the live state.

- Apply a package
- Preview changes before applying them
- Wait until a package has been fully reconciled with the live state
- Diff local configuration files and the live state

**Data Flow**: local configuration or stdin -> kpt TODO -> apiserver (Kubernetes cluster)

| Configuration Read From | Configuration Written To |
|-------------------------|--------------------------|
| local files or stdin    | apiserver                |
| apiserver               | stdout                   |

---
`
var READMEExamples = `
    # get a package
    $ kpt pkg get https://github.com/GoogleContainerTools/kpt.git/package-examples/helloworld-set@v0.1.0 helloworld
    fetching package /package-examples/helloworld-set from \
      git@github.com:GoogleContainerTools/kpt to helloworld

    # list setters and set a value
    $ kpt cfg list-setters helloworld
    NAME            DESCRIPTION         VALUE    TYPE     COUNT   SETBY
    http-port   'helloworld port'         80      integer   3
    image-tag   'hello-world image tag'   0.1.0   string    1
    replicas    'helloworld replicas'     5       integer   1

    $ kpt cfg set helloworld replicas 3 --set-by pwittrock  --description 'reason'
    set 1 fields

    # apply
    $ kubectl apply -R -f helloworld
    deployment.apps/helloworld-gke created
    service/helloworld-gke created

    # learn about kpt
    $ kpt help
`
