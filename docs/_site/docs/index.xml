<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kpt â€“ Docs</title>
    <link>https://pwittrock.github.io/kpt/docs/</link>
    <description>Recent content in Docs on Kpt</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://pwittrock.github.io/kpt/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: </title>
      <link>https://pwittrock.github.io/kpt/docs/cfg/tree/tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pwittrock.github.io/kpt/docs/cfg/tree/tree/</guid>
      <description>
        
        
        &lt;h2 id=&#34;tree&#34;&gt;tree&lt;/h2&gt;
&lt;p&gt;Print resources as a tree&lt;/p&gt;
&lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;https://pwittrock.github.io/kpt/kpt/gifs/asciinema-player.css&#34; /&gt;
&lt;asciinema-player src=&#34;https://pwittrock.github.io/kpt/kpt/gifs/cfg-tree.cast&#34; speed=&#34;1&#34; theme=&#34;solarized-dark&#34; cols=&#34;100&#34; rows=&#34;26&#34; font-size=&#34;medium&#34; idle-time-limit=&#34;1&#34;&gt;&lt;/asciinema-player&gt;
&lt;script src=&#34;https://pwittrock.github.io/kpt/kpt/gifs/asciinema-player.js&#34;&gt;&lt;/script&gt;
&lt;pre&gt;&lt;code&gt;kpt tutorial cfg tree
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;../gifs/cfg-tree.sh&#34;&gt;tutorial-script&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;p&gt;kpt cfg tree may be used to print Resources in a directory or cluster, preserving structure&lt;/p&gt;
&lt;p&gt;Args:&lt;/p&gt;
&lt;p&gt;DIR:
Path to local directory directory.&lt;/p&gt;
&lt;p&gt;Resource fields may be printed as part of the Resources by specifying the fields as flags.&lt;/p&gt;
&lt;p&gt;kpt cfg tree has build-in support for printing common fields, such as replicas, container images,
container names, etc.&lt;/p&gt;
&lt;p&gt;kpt cfg tree supports printing arbitrary fields using the &amp;lsquo;&amp;ndash;field&amp;rsquo; flag.&lt;/p&gt;
&lt;p&gt;By default, kpt cfg tree uses Resource graph structure if any relationships between resources (ownerReferences)
are detected, as is typically the case when printing from a cluster. Otherwise, directory graph structure is used. The
graph structure can also be selected explicitly using the &amp;lsquo;&amp;ndash;graph-structure&amp;rsquo; flag.&lt;/p&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# print Resources using directory structure
kpt cfg tree my-dir/

# print replicas, container name, and container image and fields for Resources
kpt cfg tree my-dir --replicas --image --name

# print all common Resource fields
kpt cfg tree my-dir/ --all

# print the &amp;quot;foo&amp;quot;&amp;quot; annotation
kpt cfg tree my-dir/ --field &amp;quot;metadata.annotations.foo&amp;quot;

# print the &amp;quot;foo&amp;quot;&amp;quot; annotation
kubectl get all -o yaml | kpt cfg tree \
  --field=&amp;quot;status.conditions[type=Completed].status&amp;quot;

# print live Resources from a cluster using owners for graph structure
kubectl get all -o yaml | kpt cfg tree --replicas --name --image

# print live Resources with status condition fields
kubectl get all -o yaml | kpt cfg tree \
  --name --image --replicas \
  --field=&amp;quot;status.conditions[type=Completed].status&amp;quot; \
  --field=&amp;quot;status.conditions[type=Complete].status&amp;quot; \
  --field=&amp;quot;status.conditions[type=Ready].status&amp;quot; \
  --field=&amp;quot;status.conditions[type=ContainersReady].status&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;heading&#34;&gt;&lt;/h3&gt;

      </description>
    </item>
    
  </channel>
</rss>
